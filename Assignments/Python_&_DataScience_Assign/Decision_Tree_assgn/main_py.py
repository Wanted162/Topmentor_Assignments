# -*- coding: utf-8 -*-
"""main.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GzZNJEHdNUVRaoTMzGP99UmFBtn7VHQa
"""

# main.py

import pandas as pd
import joblib
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

def load_and_preprocess_data(filename):
    df = pd.read_csv(filename)
    df['Age'].fillna(df['Age'].median(), inplace=True)
    df['Salary'].fillna(df['Salary'].median(), inplace=True)
    return df

def perform_eda(df):
    import matplotlib.pyplot as plt
    import seaborn as sns

    plt.figure(figsize=(10, 6))
    sns.histplot(df['Age'], kde=True)
    plt.title('Age Distribution')
    plt.savefig('age_distribution.png')
    plt.show()

    plt.figure(figsize=(10, 6))
    sns.histplot(df['Salary'], kde=True)
    plt.title('Salary Distribution')
    plt.savefig('salary_distribution.png')
    plt.show()

    plt.figure(figsize=(10, 6))
    sns.countplot(x='Gender', hue='Purchased', data=df)
    plt.title('Purchase Count by Gender')
    plt.savefig('purchase_count_gender.png')
    plt.show()

    plt.figure(figsize=(10, 6))
    sns.scatterplot(x='Age', y='Salary', hue='Purchased', data=df)
    plt.title('Age vs Salary')
    plt.savefig('age_vs_salary.png')
    plt.show()

def train_and_validate_model(df):
    X = df[['Gender', 'Age', 'Salary']]
    X = pd.get_dummies(X, drop_first=True)
    y = df['Purchased']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = DecisionTreeClassifier(random_state=42)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"Model accuracy: {accuracy:.2f}")

    print("Classification Report:")
    print(classification_report(y_test, y_pred))

    print("Confusion Matrix:")
    print(confusion_matrix(y_test, y_pred))

    joblib.dump(model, 'iphone_purchase_model.pkl')

def main():
    df = load_and_preprocess_data('iphone_purchase.csv')
    perform_eda(df)
    train_and_validate_model(df)

if __name__ == "__main__":
    main()